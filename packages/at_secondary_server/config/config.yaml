# The atProtocol secondary server configurations.

# The atProtocol atDirectory (aka root server) configuration
root_server:
  # The atDirectory's port
  port: 64
  # The atDirectory's host
  url: 'root.atsign.org'

# Default logger settings
log:
  level: INFO

# The atProtocol security configurations.
security:
  # To start secondary server in Secure/UnSecure mode. When [useTLS] is set to false, the secondary server starts in un-secure mode.
  # When [useTLS] is set to true, the secondary server starts in secure mode. On setting [useTLS] to true, the [certificateChainLocation] and
  # [privateKeyLocation] should be populated with the path's to respective certificates.
  useTLS: true
  certificateChainLocation: 'certs/fullchain.pem'
  privateKeyLocation: 'certs/privkey.pem'
  trustedCertificateLocation: '/etc/cacert/cacert.pem'
  clientCertificateRequired: true

# The atProtocol storage configurations
hive:
  # The storage path for secondary storage.
  storagePath: 'storage/hive'
  # The storage path for commit log.
  commitLogPath: 'storage/commitLog'
  # The storage path for access log.
  accessLogPath: 'storage/accessLog'
  # The storage path for notifications
  notificationStoragePath: 'storage/notificationLog.v1'
  # The frequent time interval(in minutes) to run job which removes the expired keys from secondary storage.
  expiringRunFrequencyMins: 12
  # List of malformed keys that will be deleted on server startup
  malformedKeys: 'public:publickey'
  # Delete keys that start with "public:cached" on server startup
  # This is set to true by default. To retain the malformed keys on server start-up,
  # set the flag to false.
  shouldRemoveMalformedKeys: true
  # List of keys are crucial for the server to function as expected
  # The following keys cannot be deleted
  # The list provided here will override the list of server's protected keys
  protectedKeys: []

# The atProtocol connection configurations.
connection:
  # At any point, at most [inbound_max_limit] inbound connections are allowed. The inbound connection
  # pool takes care of ensuring that idle connections are closed as necessary
  inbound_max_limit: 200

  # The maximum time in milliseconds for an **unauthenticated** inbound connection to expire.
  # Default value is 10 minutes (10 * 60 * 1000 == 600000)
  # Internally, the effective value used is reduced progressively towards 5 seconds as the current
  # number of connections approaches the inbound_max_limit.
  inbound_idle_time_millis: 600000

  # The maximum time in milliseconds for an **AUTHENTICATED** inbound connection to expire.
  # Default value is 30 days (30 * 24 * 60 * 60 * 1000 == 2592000000)
  # Internally, the effective value used is reduced progressively towards 60 seconds as the current
  # number of connections approaches the max limit. So for example if the max number of connections is
  # 200, and there are currently 200 connections, and a new client tries to connect,
  # then any authenticated connection which has been idle for more than 60 seconds will be closed
  # However: if there are only, say, 100 connections currently, then only authenticated connections
  # which have been idle for more than 30 days will be closed
  authenticated_inbound_idletime_millis: 2592000000

  # The maximum time in milliseconds for an outbound connection to expire.
  outbound_idle_time_millis: 600000

  # At any point, at most [outbound_max_limit] outbound connections are allowed.
  outbound_max_limit: 200

# The atProtocol commit log compaction job configurations.
commit_log_compaction:
  # The frequent time interval (in minutes) to initiate the commit log compaction job service.
  compactionFrequencyMins: 18
  # The percentage of logs to remove through the commit log compaction job service.
  compactionPercentage: 20
  # The frequent interval (in days) for the records in log persistent store to expire and remove permanently.
  expiryInDays: 15
  # The size of the log persistent storage (in KiloBytes) when reached, initiates the commit log compaction job service.
  sizeInKB: 10

# The atProtocol access log compaction job configurations.
access_log_compaction:
  # The frequent time interval (in minutes) to initiate the access log compaction job service.
  compactionFrequencyMins: 15
  # The percentage of logs to remove through the access log compaction job service.
  compactionPercentage: 30
  # The frequent interval (in days) for the records in log persistent store to expire and remove permanently.
  expiryInDays: 15
  # The size of the log persistent storage (in KiloBytes) when reached, initiates the access log compaction job service.
  sizeInKB: 2

# The atProtocol notification keystore compaction job configurations.
notification_keystore_compaction:
  compactionFrequencyMins: 5
  compactionPercentage: 30
  expiryInDays: 1
  sizeInKB: -1

# The atProtocol key lookup configurations.
lookup:
  # The number of iterations to resolve the atSign value references.
  depth_of_resolution: 3

# The configurations for atProtocol statistics
stats:
  # Return the other atSign users who visited the current atSign for maximum number of times in the descending order.
  top_visits: 5
  # Return the keys of current atSign's looked up by the other atSign users for maximum number of times in the descending order.
  top_keys: 5

notification:
  autoNotify: true
  # The maximum number of retries for a notification.
  max_retries: 30
  # The quarantine duration of an atsign. Notifications will be retried max_retries times, every quarantineDuration seconds approximately.
  quarantineDuration: 10
  # The notifications queue will be processed every jobFrequency seconds. However, the notifications queue will always be processed
  # *immediately* when a new notification is queued. When that happens, the queue processing will not run again until jobFrequency
  # seconds have passed since the last queue-processing run completed.
  jobFrequency: 5
  # The time interval(in seconds) to notify latest commitID to monitor connections
  # To disable to the feature, set to -1.
  statsNotificationJobTimeInterval: 15
  # The amount of time after which a notification expires in units of minutes. Defaults to 24 hours or 1440 minutes
  expiryInMins: 15

# At refresh Job to refresh the cached keys.
refreshJob:
  # Hour at which the job has to run. Currently runs at 3 A.M. every day.
  runJobHour: 3

certificate_expiry:
  # Force restart secondary server.
  force_restart: false

# Sync Configurations
sync:
  # Represents the size of buffer for each batch.
  bufferSize: 5242880
  # Represents the numbers of keys to send in each batch.
  pageLimit: 25

#set to true in testing mode, false by default
#IMPORTANT NOTE : please set testingMode to true only if you know what you're doing. Set to false when not testing
testing:
  testingMode: false
